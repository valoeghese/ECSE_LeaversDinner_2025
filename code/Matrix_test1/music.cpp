/* ========================================
 *
 * Copyright Norman the Nomad, 2024
 * All Rights Reserved
 *
 * ========================================
*/

//MUSIC
#include <stdio.h>
#include "pico/stdlib.h"
#include "music.hpp"
#include "imitation/ToneGen.hpp"

#define CyDelayUs(x) sleep_us(x)

static uint32_t timer_period_ms = 100;
static uint8_t timer_enable = 0;

//clock divder compare vals forr 100khz freq counter
uint16_t notes[13][9] = {
    {8032, 4016, 2008, 1004, 502, 251, 126, 63, 31}, // C          0
    {7581, 3791, 1895, 948, 474, 237, 118, 59, 30}, // C#         1
    {7156, 3578, 1789, 894, 447, 224, 112, 56, 28}, // D          2
    {6754, 3377, 1689, 844, 422, 211, 106, 53, 26}, // Eb         3
    {6375, 3188, 1594, 797, 398, 199, 100, 50, 25},  // E          4
    {6017, 3009, 1504, 752, 376, 188, 94, 47, 24},  // F          5
    {5680, 2840, 1420, 710, 355, 177, 89, 44, 22},  // F#         6
    {5361, 2680, 1340, 670, 335, 168, 84, 42, 21},  // G          7
    {5060, 2530, 1265, 632, 316, 158, 79, 40, 20},   // Ab         8
    {4776, 2388, 1194, 597, 299, 149, 75, 37, 19},   // A          9
    {4508, 2254, 1127, 563, 282, 141, 70, 35, 18},   // Bb         A
    {4255, 2127, 1064, 532, 266, 133, 66, 33, 17},   // B          B
    {0,     0,    0,    0,    0,    0,   0,   0,   0}};   // CONTROL    C

//Control notes: 0x0c = no note. 0x1c = end of song, stop. 0x2c = end of song, loop. 0x3c = change speed (following note is read as new speed in ms period)
//               0x4c = slide (between 2 notes)
// default speed is DEFAULT_SPEED
#define END_OF_SONG 0x1c
#define LOOP 0x2c
#define SPEED 0x3c
#define SLIDE 0x4c

#define DEFAULT_SPEED 125

#define FALSE_TRIPLET(note, note2, note3) note, note, 0x0c, note2, note2, 0x0c, note3, note3
#define FALSE_TRIPLET_SMOOTH(note, note2, note3) note, note, note, note2, note2, note2, note3, note3

uint16_t noteCounter = 0;
static uint8_t slideCounter =0;
static uint16_t slideReturnSpeed = 0; // set to a number if in slide

#define SLIDE_LENGTH 12
static uint16_t slide[SLIDE_LENGTH];//5 notes


// Megalovania
uint8_t megalovania[] = {0x42, 0x42, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x40, 0x40, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x3B, 0x3B, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x39, 0x39, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x42, 0x42, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x40, 0x40, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x3B, 0x3B, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x39, 0x39, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x42, 0x42, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x40, 0x40, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x3B, 0x3B, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x39, 0x39, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x42, 0x42, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x40, 0x40, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x3B, 0x3B, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x39, 0x39, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x45, 0x0C, 0x45, 0x45, 0x0C, 0x45, 0x0C, 0x45, 0x0C, 0x42, 0x0C, 0x42, 0x0C, 0x0C, 0x42, 0x0C, 0x45, 0x45, 0x45, 0x45, 0x0C, 0x47, 0x0C, 0x48, 0x0C, 0x47, 0x45, 0x42, 0x45, 0x47, 0x0C, 0x0C, 0x45, 0x0C, 0x45, 0x45, 0x0C, 0x47, 0x0C, 0x48, 0x0C, 0x49, 0x0C, 0x50, 0x0C, 0x49, 0x0C, 0x0C, 0x52, 0x0C, 0x52, 0x0C, 0x52, 0x49, 0x52, 0x50, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x49, 0x0C, 0x49, 0x49, 0x0C, 0x49, 0x0C, 0x49, 0x0C, 0x47, 0x0C, 0x47, 0x0C, 0x0C, 0x0C, 0x0C, 0x49, 0x0C, 0x49, 0x49, 0x0C, 0x49, 0x0C, 0x47, 0x0C, 0x49, 0x0C, 0x52, 0x0C, 0x49, 0x47, 0x0C, 0x52, 0x0C, 0x49, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x50, 0x0C, 0x49, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x0C, 0x44, 0x45, 0x0C, 0x49, 0x0C, 0x50, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x45, 0x42, 0x45, 0x47, 0x48, 0x47, 0x45, 0x42, 0x48, 0x47, 0x45, 0x42, 0x45, 0x47, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x48, 0x0C, 0x49, 0x50, 0x0C, 0x49, 0x48, 0x47, 0x45, 0x42, 0x44, 0x45, 0x0C, 0x47, 0x0C, 0x48, 0x0C, 0x50, 0x0C, 0x0C, 0x51, 0x0C, 0x48, 0x0C, 0x48, 0x47, 0x45, 0x47, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x45, 0x0C, 0x44, 0x0C, 0x0C, 0x0C, 0x42, 0x0C, 0x0C, 0x0C, 0x44, 0x0C, 0x0C, 0x0C, 0x45, 0x0C, 0x0C, 0x0C, 0x47, 0x0C, 0x0C, 0x0C, 0x44, 0x0C, 0x0C, 0x0C, 0x49, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x49, 0x48, 0x47, 0x0C, 0x45, 0x44, 0x43, 0x42, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x43, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x45, 0x42, 0x45, 0x47, 0x48, 0x47, 0x45, 0x42, 0x48, 0x47, 0x45, 0x42, 0x44, 0x47, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x48, 0x0C, 0x49, 0x0C, 0x50, 0x0C, 0x49, 0x48, 0x47, 0x45, 0x42, 0x44, 0x45, 0x0C, 0x47, 0x0C, 0x49, 0x0C, 0x50, 0x0C, 0x51, 0x0C, 0x48, 0x0C, 0x48, 0x47, 0x45, 0x47, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x45, 0x0C, 0x44, 0x0C, 0x0C, 0x0C, 0x42, 0x0C, 0x0C, 0x0C, 0x44, 0x0C, 0x0C, 0x0C, 0x45, 0x0C, 0x0C, 0x0C, 0x47, 0x0C, 0x0C, 0x0C, 0x44, 0x0C, 0x0C, 0x0C, 0x49, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x49, 0x48, 0x47, 0x0C, 0x45, 0x44, 0x43, 0x42, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x43, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x45, 0x0C, 0x0C, 0x0C, 0x44, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x42, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x45, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x45, 0x0C, 0x0C, 0x0C, 0x44, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x42, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x42, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x45, 0x0C, 0x0C, 0x0C, 0x44, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x42, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x45, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x45, 0x0C, 0x0C, 0x0C, 0x44, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x42, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x42, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x42, 0x42, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x42, 0x42, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x0C, 0x0C, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x40, 0x40, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x42, 0x42, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x42, 0x42, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x0C, 0x0C, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x40, 0x40, 0x52, 0x0C, 0x49, 0x0C, 0x0C, 0x48, 0x0C, 0x47, 0x0C, 0x45, 0x0C, 0x42, 0x45, 0x47, 0x1C};

// Bad Apple WIP
#define BAD_APPLE_SPEED 110
#define INTRO_1 SPEED, BAD_APPLE_SPEED*2, 0x1A, 0x0c, 0x1A, 0x0c, 0x1A, 0x0c, SPEED, BAD_APPLE_SPEED/2, 0x21, 0x0c, 0x21, 0x0c, 0x21, 0x0c, 0x21, 0x0c
#define INTRO_2 SPEED, BAD_APPLE_SPEED*2, 0x1A, 0x0c, 0x1A, 0x0c, 0x1A, 0x0c, SPEED, BAD_APPLE_SPEED, 0x1A, 0x0c, 0x1A, 0x0c
#define BASS_1 0x13, 0x13, 0x21, 0x23, 0x0c, 0x23, 0x21, 0x23
#define BASS_2 0x13, 0x13, 0x23, 0x26, 0x28, 0x28, 0x26, 0x28
#define BASS_3 0x28, 0x28, 0x26, 0x28, 0x26, 0x26, 0x21, 0x23
#define MELODY_1 0x43, 0x45, 0x46, 0x48, 0x4A, 0x4A, 0x53, 0x51, 0x4A, 0x4A, 0x43, 0x43, 0x4A, 0x48, 0x46, 0x45, 0x43, 0x45, 0x46, 0x48, 0x4A, 0x4A, 0x48, 0x46
#define MELODY_1A 0x43, 0x45, 0x46, 0x48, 0x4A, 0x4A, 0x53, 0x51, 0x4A, 0x4A, 0x43, 0x43, 0x48, 0x48, 0x46, 0x45, 0x43, 0x45, 0x46, 0x48, 0x4A, 0x4A, 0x48, 0x46
#define MELODY_2 0x45, 0x43, 0x45, 0x46, 0x45, 0x43, 0x42, 0x45
#define MELODY_3 0x45, 0x0c, 0x46, 0x0c, 0x48, 0x48, 0x4A, 0x4A
#define MELODY_3A 0x45, 0x0c, 0x46, 0x0c, 0x48, 0x0c, 0x4A, 0x0c
#define MELODY_4 0x51, 0x53, 0x4A, 0x48, 0x4A, 0x4A, 0x48, 0x4A, 0x51, 0x53, 0x4A, 0x48, 0x4A, 0x4A
#define MELODY_5 0x48, 0x4A, 0x48, 0x46, 0x45, 0x41, 0x43, 0x43, 0x41, 0x43, 0x45, 0x46, 0x48, 0x4A, 0x43, 0x43, 0x48, 0x4A
#define MELODY_6 0x53, 0x55, 0x56, 0x55, 0x53, 0x51, 0x4A, 0x4A, 0x48, 0x4A, 0x48, 0x46, 0x45, 0x41, 0x43, 0x43
#define MELODY_4A 0x52, 0x54, 0x4B, 0x49, 0x4B, 0x4B, 0x49, 0x4B, 0x52, 0x54, 0x4B, 0x49, 0x4B, 0x4B
#define MELODY_5A 0x49, 0x4B, 0x49, 0x47, 0x46, 0x42, 0x44, 0x44, 0x42, 0x44, 0x46, 0x47, 0x49, 0x4B, 0x44, 0x44, 0x49, 0x4B
#define MELODY_6A 0x54, 0x56, 0x57, 0x56, 0x54, 0x52, 0x4B, 0x4B, 0x49, 0x4B, 0x49, 0x47, 0x46, 0x42, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x0c, 0x0c

uint8_t badApple[] = {
    // Drum Beat
    SPEED, BAD_APPLE_SPEED*2, 0x1A, 0x0c, 0x1A, 0x0c, 0x1A, 0x0c, SPEED, BAD_APPLE_SPEED/2, 0x1A, 0x0c, 0x1A, 0x0c, 0x1A, 0x0c, 0x1A, 0x0c,
    INTRO_2,
    INTRO_1, INTRO_2,
    INTRO_1, INTRO_2,
    INTRO_1, SPEED, BAD_APPLE_SPEED*2, 0x1A, 0x0c, 0x1A, 0x0c, 0x1A, 0x0c, 0x0c, 0x0c,
    // Bass Line Enters
    SPEED, BAD_APPLE_SPEED,
    BASS_1, BASS_1, BASS_1, BASS_2,
    BASS_1, BASS_1, BASS_1, BASS_3,
    BASS_1, BASS_1, BASS_1, BASS_2,
    BASS_1, BASS_1, BASS_1, SPEED, BAD_APPLE_SPEED/2, FALSE_TRIPLET(0x28, 0x26, 0x28), FALSE_TRIPLET(0x26, 0x25, 0x26),
    // Melody Enters
    SPEED, BAD_APPLE_SPEED*2,
    MELODY_1, MELODY_2, MELODY_1A, MELODY_3,
    MELODY_1, MELODY_2, MELODY_1A, MELODY_3A,
    MELODY_4, MELODY_5, MELODY_4, MELODY_5,
    MELODY_4, MELODY_5, MELODY_4, MELODY_6, 0x48, 0x4A,
    MELODY_4, MELODY_5, MELODY_4, MELODY_5,
    MELODY_4, MELODY_5, MELODY_4, MELODY_6, 0x43, 0x0c,
    // Bass line bacc
    SPEED, BAD_APPLE_SPEED,
    BASS_1, BASS_1, BASS_1, BASS_2,
    BASS_1, BASS_1, BASS_1, BASS_3,
    BASS_1, BASS_1, BASS_1, BASS_2,
    BASS_1, BASS_1, BASS_1, SPEED, BAD_APPLE_SPEED/2, FALSE_TRIPLET(0x28, 0x26, 0x28), FALSE_TRIPLET(0x26, 0x25, 0x26),
    // Melody bacc
    SPEED, BAD_APPLE_SPEED*2,
    MELODY_1, MELODY_2, MELODY_1A, MELODY_3,
    MELODY_1, MELODY_2, MELODY_1A, MELODY_3A,
    MELODY_4, MELODY_5, MELODY_4, MELODY_5,
    MELODY_4, MELODY_5, MELODY_4, MELODY_6, /*goes up one semitone*/0x49, 0x4B,
    MELODY_4A, MELODY_5A, MELODY_4A, MELODY_5A,
    MELODY_4A, MELODY_5A, MELODY_4A, MELODY_6A,
    END_OF_SONG};

// Greensleeves
#define GREENSLEEVES_SPEED 150
#define GREENSLEEVES_LINE_1 0x57, 0x57, 0x57, 0x57, 0x59, 0x59, 0x5B, 0x5B, 0x5B, 0x61, 0x5B, 0x5B,\
                            0x59, 0x59, 0x59, 0x59, 0x56, 0x56, 0x52, 0x52, 0x52, 0x54, 0x56, 0x56
#define GREENSLEEVES_LINE_1A 0x62, 0x62, 0x62, 0x62, 0x62, 0x0c, 0x62, 0x62, 0x62, 0x61, 0x5B, 0x5B, \
                            0x59, 0x59, 0x59, 0x59, 0x56, 0x56, 0x52, 0x52, 0x52, 0x54, 0x56, 0x56
#define GREENSLEEVES_LINE_2 0x57, 0x57, 0x57, 0x57, 0x54, 0x0c, 0x54, 0x54, 0x54, 0x52, 0x54, 0x54, \
                            0x56, 0x56, 0x56, 0x56, 0x52, 0x52, 0x4B, 0x4B, 0x4B, 0x4B
#define GREENSLEEVES_LINE_3 0x57, 0x57, 0x57, 0x56, 0x54, 0x54, 0x53, 0x53, 0x53, 0x51, 0x53, 0x53, \
                            0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x54, 0x0c, 0x0c

uint8_t greensleeves[] = {SPEED, GREENSLEEVES_SPEED, 0x54, 0x54,
    GREENSLEEVES_LINE_1, GREENSLEEVES_LINE_2, 0x54, 0x54, GREENSLEEVES_LINE_1, GREENSLEEVES_LINE_3, 0x0c, 0x0c,
    GREENSLEEVES_LINE_1A, GREENSLEEVES_LINE_2, 0x0c, 0x0c, GREENSLEEVES_LINE_1A, GREENSLEEVES_LINE_3,
    LOOP};

// Mario Death
uint8_t marioDeath[] = {0x45, 0x55, 0x0c, SPEED, DEFAULT_SPEED/2, 0x55, 0x0c, FALSE_TRIPLET(0x55, 0x54, 0x52), SPEED, DEFAULT_SPEED, 0x50, 0x47, 0x0c, 0x44, 0x40, 0x40, END_OF_SONG};

// Weezered
 uint8_t buddyHolly[] = {SPEED, DEFAULT_SPEED*2, 0x58, 0x54, 0x58, 0x5A, SLIDE, 0x5A, 0x60, 0x5B, 0x5A, 0x54, 0x53, 0x53, 0x53, 0x53, 0x53, END_OF_SONG};

// Food SFX
uint8_t pickup[] = {0x50, 0x50, 0x50, 0x50, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, END_OF_SONG};

// Powerup SFX
uint8_t powerUp[] = {0x0C, 0x5B, 0x64, END_OF_SONG};

//lostLife SFX
uint8_t lostLife[] = {0x47, 0x44, END_OF_SONG};

//gameOver SFX
uint8_t gameOver[] = {0x47, 0x47, 0x46, 0x46, 0x45, 0x45, 0x44, 0x44, 0x44, END_OF_SONG};

uint8_t tuning[] = {SPEED, 255, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39,  LOOP};

#define INTRO_LICK_1 FALSE_TRIPLET_SMOOTH(0x51,0x53,0x43),0x53,0x53,0x53,0x55,0x55,0x55,SPEED,DEFAULT_SPEED/2,0x58,0x58,0x56,0x56,0x55,0x55,0x51,0x0c,SPEED,DEFAULT_SPEED*2
#define COOL_TRANSITION SPEED,DEFAULT_SPEED/2,0x51,0x0c,0x51,0x0c,0x41,0x0c,0x41,0x0c,0x51,0x0c,0x51,0x0c,0x41,0x0c,0x41,0x0c,SPEED,DEFAULT_SPEED
#define NEVER_GONNA 0x38,0x3A,0x40,0x38
#define NEVER_GONNA_GIVE_YOU_UP NEVER_GONNA, FALSE_TRIPLET(0x45,0x45,0x43), 0x43,0x43,0x0c,0x0c

uint8_t rickroll[] = {
    SLIDE, 0x56, 0x46,SLIDE, 0x56, 0x46, 0x0c, SLIDE, 0x56, 0x46,SLIDE, 0x56, 0x46,SLIDE, 0x56, 0x46,SLIDE, 0x56, 0x46,SLIDE, 0x56, 0x46,SLIDE, 0x56, 0x46,SLIDE, 0x56, 0x46,
    SPEED,DEFAULT_SPEED*2,
    INTRO_LICK_1,
    FALSE_TRIPLET_SMOOTH(0x51,0x53,0x48),0x48,0x48,0x48,0x48,0x48, SPEED,DEFAULT_SPEED/2,0x48,0x0c,SPEED,DEFAULT_SPEED,0x48,0x4A,0x51,0x4A,0x51,
    SPEED,DEFAULT_SPEED*2,
    INTRO_LICK_1,
    FALSE_TRIPLET_SMOOTH(0x51,0x53,0x48),0x48,0x48,0x48,0x48,COOL_TRANSITION,
    
    // Melody Enters
    // Verse (We're no strangers...)
    SPEED,DEFAULT_SPEED,
    0x0c,0x0c,0x0c,0x0c, 0x3A,0x3A,0x40,0x40, 0x41,0x0c,0x41,0x41, 0x43,0x43,0x40,0x40, 0x40,0x3A,0x38,0x38, 0x38,0x38,0x38,0x38, 0x38,0x38,0x38,0x38, 0x0c,0x0c,0x0c,0x0c,
    0x0c,0x0c,0x0c,0x0c, 0x3A,0x3A,0x40,0x40, 0x41,0x41,0x3A,0x3A, 0x0c,0x0c,0x3A,0x3A, 0x48,0x48,0x0c,0x0c, 0x48,0x48,0x43,0x43, 0x43,0x43,0x43,0x43, 0x0c,0x0c,0x0c,0x0c,
    0x0c,0x0c,0x3A,0x0c, 0x3A,0x3A,0x40,0x40, 0x41,0x41,0x40,0x40, 0x41,0x41,0x43,0x43, 0x0c,0x0c,0x40,0x0c, 0x3A,0x0c,0x40,0x3A, 0x38,0x38,0x38,0x38, 0x38,0x38,0x0c,0x0c,
    0x0c,0x0c,0x3A,0x0c, 0x3A,0x3A,0x40,0x40, 0x41,0x41,0x40,0x40, 0x38,0x38,0x0c,0x0c, 0x43,0x43,0x45,0x45, 0x43,0x43,0x45,0x45, 0x43,0x43,0x43,0x43, 0x43,0x0c,0x0c,0x0c,
    // Pre-Chorus (I....)
    0x41,0x41,0x41,0x41, 0x41,0x41,0x41,0x41, 0x41,0x41,0x43,0x43, 0x45,0x45,0x41,0x41, 0x43,0x0c,0x43,0x0c, 0x43,0x43,0x45,0x45, 0x43,0x43,0x38,0x0c, 0x38,0x38,0x38,0x38,
    0x38,0x38,0x0c,0x0c, 0x0c,0x0c,0x0c,0x0c, 0x3A,0x3A,0x40,0x40, 0x41,0x41,0x3A,0x3A, 0x0c,0x0c,0x43,0x43, 0x45,0x45,0x43,0x43, 0x43,0x43,0x0c,0x0c,
    // Chorus (Never gonna...)
    NEVER_GONNA_GIVE_YOU_UP,
    NEVER_GONNA, FALSE_TRIPLET(0x43,0x43,0x41), 0x41,SLIDE,0x41,0x40,SLIDE,0x40,0x3A,0x3A,
    NEVER_GONNA, 0x41,0x41,0x41,0x41, 0x43,0x43,0x40,0x40, 0x40,0x3A,0x38,0x38, 0x38,0x0c,0x38,0x38, 0x43,0x43,0x43,0x43, 0x41,0x41,0x41,0x41, 0x0c,0x0c,0x0c,0x0c,
    NEVER_GONNA_GIVE_YOU_UP,
    NEVER_GONNA, 0x48,0x48,0x48,0x48, 0x40,0x40,0x41,0x41, 0x41,SLIDE,0x41,0x40,SLIDE,0x40,0x38,0x38,
    NEVER_GONNA, 0x41,0x41,0x41,0x41, 0x43,0x43,0x40,0x40, 0x40,0x3A,0x38,0x38, 0x38,0x0c,0x38,0x38, 0x43,0x43,0x41,0x0c, 0x41,0x41,0x41,0x41, COOL_TRANSITION,
    
    END_OF_SONG};

uint8_t *noteList;

uint16_t note = 0;
uint16_t compare = 0;

uint8_t musicOn = 0;
int8_t currentSong = -1;

static int64_t nextNote(alarm_id_t id, __unused void *user_data);

//                           0          1          2        3      4         5         6          7        8           9          10
uint8_t *songList[] = {megalovania, buddyHolly, pickup, powerUp, lostLife, gameOver, marioDeath, tuning, badApple, greensleeves, rickroll};
enum Song {
    SONG_MEGALOVANIA = 0,
    SONG_BUDDY_HOLLY = 1,
    SONG_PICKUP = 2,
    SONG_POWERUP = 3,
    SONG_LOST_LIFE = 4,
    SONG_GAME_OVER = 5,
    SONG_MARIO_DEATH = 6,
    SONG_TUNING = 7,
    SONG_BAD_APPLE = 8,
    SONG_GREENSLEEVES = 9,
    SONG_RICKROLL = 10
};

uint8_t numSongs = sizeof(songList) / sizeof(uint8_t *); // the compiler knows the size of this array at compile so this works

// prepare note
static void prepareNote(void);

/**
 * Main Loop for music code.
 * Not very large as it is controlled by a timer.
 *  */
void core1MusicMain(void)
{
    initMusic();
    playSong(SONG_GREENSLEEVES);
    timer_enable = 1;
    while (1) {
        //tight_loop_contents();
        nextNote(NULL, NULL);
        CyDelayUs(500 * timer_period_ms);
    }
}

////////// MUSIC LOGIC ///////////

void initMusic()
{
    ToneGen_Init();
    //add_alarm_in_ms((uint32_t)timer_period_ms, nextNote, NULL, false);
    stopMusic();
}

void stopMusic()
{
    ToneGen_Sleep();
    timer_enable = 0;//Sleep
    currentSong = -1;
    musicOn = 0;
}

void toggleMusic()
{
    if(musicOn == 0)
    {
        musicOn = 1;
        noteCounter = 0;
    }
    else
    {
        stopMusic();
    }
}

int8_t playSong(int8_t songID) {
    noteCounter = 0;
    if((songID > numSongs) || (songID < 0)){
        return -1;
    }
    noteList = songList[songID];
    ToneGen_Enable();
    timer_enable = 1;
    timer_period_ms = DEFAULT_SPEED * 2;
    slideReturnSpeed = 0; // no slide
    prepareNote();CyDelayUs(600); //setup / hold period of note timer on PSOC (do we need it on Pico?)
    
    musicOn = 1;
    currentSong = songID;
    //nextNote();
    return songID;
}

uint8_t isPlaying(void)
{
    return musicOn;
}

static inline uint16_t lerp(uint8_t progress, uint16_t start, uint16_t end) {
    switch (progress){
    case 0:
        return start;
    case 1:
        return (start*3 + end)/4;
    case 2:
        return (start*2 + end*2)/4;
    case 3:default:
        return (start + end*3)/4;
    }
}

static int64_t nextNote(alarm_id_t id, __unused void *user_data)
{
    if (!timer_enable)
        return timer_period_ms * (int64_t)1000;
    
    // enter slide (setup in previous tick)
    if (noteList[noteCounter] == SLIDE && slideCounter == 0) {
        uint16_t startNote = notes[(noteList[noteCounter+1]&0x0F)][((noteList[noteCounter+1] & 0xF0)>>4)];
        uint16_t endNote = notes[(noteList[noteCounter+2]&0x0F)][((noteList[noteCounter+2] & 0xF0)>>4)];
        for (uint8_t i = 0; i < 4; i++) {
            slide[i] = lerp(i, startNote, endNote);
        }
        for (uint8_t i = 4; i < SLIDE_LENGTH; i++) {
            slide[i] = endNote;
        }
        
        noteCounter += 3;
    }
    
    // slide handled differently from other stuff
    if (slideReturnSpeed) {
        note = slide[slideCounter];
        slideCounter++;
    } else {
        note = notes[(noteList[noteCounter]&0x0F)][((noteList[noteCounter] & 0xF0)>>4)];
        
        if(noteList[noteCounter] == LOOP){
            noteCounter = 0;
        } else if (noteList[noteCounter] == END_OF_SONG) {
            stopMusic();
        } else {
            // Increment
            noteCounter++;
        }
    }
    
    compare = note/2;
    static uint8_t hack100 = 1; 
    if (note == 0) {
        //if (hack100) ToneGen_Sleep();
        
        ToneGen_WriteCompare(100);
        ToneGen_WritePeriod(100);
        hack100 = 0;
    } else {
        //if (!hack100) ToneGen_Enable();
        hack100 = 1;
        
        ToneGen_WritePeriod(note);
        ToneGen_WriteCompare(compare);
    }

    // All period changes have to be done before the next note, it seems
    
    // return from slide
    if (slideReturnSpeed && slideCounter == SLIDE_LENGTH) {
        timer_period_ms = slideReturnSpeed;
        slideReturnSpeed = 0;
    }

    if (!slideReturnSpeed && musicOn /*not stopped*/) {
        prepareNote();
    }
    
    CyDelayUs(600); //setup / hold period of note timer

    return timer_period_ms * (int64_t)1000;
}

static void prepareNote(void)
{
    // speed command
    // after return as speed may be the next instruction
    if (noteList[noteCounter] == SPEED) {
        uint8_t ms = noteList[noteCounter + 1];
        timer_period_ms = ((uint16_t)ms * 2);

        noteCounter += 2;
    }

    // but, we could have a slide instruction after a speed change
    // so we check it last
    // annoying
    if (noteList[noteCounter] == SLIDE) {
        slideReturnSpeed = (uint16_t)timer_period_ms;
        timer_period_ms = (slideReturnSpeed/SLIDE_LENGTH);//faster x4
        slideCounter = 0;

        /*incrementing note counter happens next tick at the beginning, where the actual mechanics of the slide are handled*/
    }
}
